[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Creating educational resources for sspcloud users",
    "section": "",
    "text": "This tutorial aims to be a practical guide for people building R or Python educational resources and wishing to facilitate access to them through the SSPCloud.\nIt requires a minimum knowledge on:\nThe aim of this tutorial is also to propose a minimal template to get you started more quickly on building educational resources that are state-of-the-art in terms of reproducibility."
  },
  {
    "objectID": "index.html#make-a-ready-to-use-link-to-your-resources",
    "href": "index.html#make-a-ready-to-use-link-to-your-resources",
    "title": "Creating educational resources for sspcloud users",
    "section": "Make a ready to use link to your resources",
    "text": "Make a ready to use link to your resources\nLet’s assume now you want trainees to avoid copy-pasting code from your program to their sandbox environment. SSPCloud proposes a feature that enables to launch a ready to use sandbox with one click. This enables to start an environment that can be overloaded by some parameters that would make trainees ready to start their learning experience.\n\nRPython"
  },
  {
    "objectID": "resources/r.html",
    "href": "resources/r.html",
    "title": "Hello SSPCloud",
    "section": "",
    "text": "Rstudio projects and renv are two useful tools to offer a convenient interface to write R code and disseminate it to users in a reproducible ways."
  },
  {
    "objectID": "resources/r.html#rstudio-projects",
    "href": "resources/r.html#rstudio-projects",
    "title": "Hello SSPCloud",
    "section": "Rstudio projects",
    "text": "Rstudio projects\nRstudio Projects are a built-in feature of RStudio that help organize your work in a consistent and structured way. When you create an RStudio project, it establishes a self-contained working environment tied to a specific folder on your computer, containing all the files related to the project. An RStudio project is essentially a wrapper around a folder, with a file ending in .Rproj that stores project-specific settings.\nRStudio Projects have multiple advantages:\n\nEasy script management and lisibility: all scripts related to a task are kept in one designated folder, and are not mixed with scripts pertaining to unrelated tasks. The clear structure of RStudio projects ensures that collaborators can quickly understand and use your project.\nConsistent working directory and portability: RStudio automatically sets the working directory to the project’s folder when you open the Rstudio project. There is no need to use setwd(), and all paths are relative to the project’s folder. This increases the portability of code.\nIntegration with git: Rstudio projects work seamlessly with Git thanks to a dedicated panel in the Rstudio interface. This makes tracking changes, working with collaborators (and reverting to earlier versions if needed) really easy.\nIntegration with Quarto: RStudio projects provide a natural environment for rendering reports, books, and presentations, maintaining a clear link between source files and outputs.\nReproducibility through the renv integration: renv is an R package that helps creating reproducible environments by systematically listing the dependencies of a project. renv works seamlessly with RStudio projects, making it easy to manage dependencies and ensure reproducibility."
  },
  {
    "objectID": "resources/r.html#renv",
    "href": "resources/r.html#renv",
    "title": "Hello SSPCloud",
    "section": "renv",
    "text": "renv\n\nWhat is renv\nrenv is an R package that helps manage project-specific package libraries in R. It lists the dependencies of a project, so that the execution environment can be easily restored in other settings, or by other users. Using renv greatly improves the reproducibility of R code.\nMoreover, renv works seamlessly with RStudio projects:\n\nEasy Initialization: renv detects when it’s used within an RStudio project and sets the working directory to the project folder.\nEnvironment Isolation: each RStudio project can have its own renv library, preventing dependency conflicts across projects.\nEasy configuration: the .Rproj file can store settings related to renv, such as enabling auto-activation (activating renv automatically when the project is opened).\nReproducibility: cloning a RStudio project repository and then running renv::restore() recreates the exact environment needed to run the project.\n\n\n\nHow to use renv\n\nInitialization\n\n\nRun renv::init() to initialize renv in a Rstudio project. This creates:\nA private package library (/renv/library) in the project directory. R prioritizes this library over the global R library when working within the project.\nConfiguration files like renv.lock and renv/settings.json. The renv.lock file records the exact version of each package and its source. It ensures that the same environment can be recreated in the future or on another system.\n\n\nDependency Management\n\n\nThe renv::snapshot() command updates the renv.lock to reflect the current state of the project’s library.\nThe renv::restore() reinstalls the exact package versions listed in the renv.lock file.\n\n\nIntegration with Version Control\n\n\nThe lockfile can be committed to Git, allowing collaborators to replicate the same environment by running renv::restore().\n\n\n\nrenv workflow\nFirst, if not automatically initiated, you need to start following dependencies using renv:\n# Initialize renv\nrenv::init()\nThen, let’s say your quarto document will make use of dplyr and ggplot2. In R command you write\ninstall.packages(c(\"ggplot2\", \"dplyr\"))\nThen you can develop your document, let’s say it contains this chunk\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\niris &lt;- as_tibble(iris)\n\nggplot(iris) + \ngeom_point(aes(x = Sepal.Length, y = Petal.Width, color = Species))\n\n\n\n\n\n\n\n\nOnce you are happy with your document, you snapshot the reproducible environment you use:\n# Update the lockile\nrenv::snapshot()"
  },
  {
    "objectID": "resources/python.html",
    "href": "resources/python.html",
    "title": "Hello SSPCloud",
    "section": "",
    "text": "Jupyter notebooks1 offer an interactive interface that allows you to write Python code, test it, and see the result below the instruction rather than in a separate console. Jupyter notebooks are essential in the fields of data science and education and research because they greatly simplify exploration and experimentation.\nThey allow you to combine text in Markdown format (a lighter markup text format than HTML or \\(\\LaTeX\\)), Python code, and HTML code for visualizations and animations in a single document.\nInitially, Jupyter was the only software offering these interactive features. Now, there are other ways to benefit from notebook advantages while having an IDE with more comprehensive features than Jupyter. For this reason, as of 2024, it is more practical to use VSCode[^vscode-python], a general-purpose code editor but offering excellent features in Python, than Jupyter. For more information on using notebooks in VSCode, refer to the official documentation.\nJupyter gives access to interactive tutorials\nimport pandas as pd\ndf = pd.read_csv(\"https://koumoul.com/s/data-fair/api/v1/datasets/igt-pouvoir-de-rechauffement-global/convert\")\ndf.head(2)\n\n\n\n\n\n\n\n\nINSEE commune\nCommune\nAgriculture\nAutres transports\nAutres transports international\nCO2 biomasse hors-total\nDéchets\nEnergie\nIndustrie hors-énergie\nRésidentiel\nRoutier\nTertiaire\n\n\n\n\n0\n01001\nL'ABERGEMENT-CLEMENCIAT\n3711.425991\nNaN\nNaN\n432.751835\n101.430476\n2.354558\n6.911213\n309.358195\n793.156501\n367.036172\n\n\n1\n01002\nL'ABERGEMENT-DE-VAREY\n475.330205\nNaN\nNaN\n140.741660\n140.675439\n2.354558\n6.911213\n104.866444\n348.997893\n112.934207"
  },
  {
    "objectID": "resources/python.html#footnotes",
    "href": "resources/python.html#footnotes",
    "title": "Hello SSPCloud",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJupyter originated from the IPython project, an interactive environment for Python developed by Fernando Pérez in 2001. In 2014, the project evolved to support other programming languages in addition to Python, leading to the creation of the Jupyter project. The name “Jupyter” is an acronym referring to the three main languages it supports: Julia, Python, and R. Jupyter notebooks are crucial in the fields of data science and education and research because they greatly simplify exploration and experimentation.↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]