---
title: "Creating and disseminating educational resources for `SSPCloud` users"
subtitle: "Startup guide"
author: "Lino Galiana and Olivier Meslin"
---


This tutorial aims to be a practical guide for people developing educational resources in {{< fa brands r-project >}} or `Python` {{< fa brands python >}} and wishing to disseminate them easily through the `SSPCloud`.

To make this possible, a few technical prerequisites are needed - these are outlined in @imp-req.

The aim of this tutorial is to get you started quickly on building educational resources with a __state-of-the-art level of reproducibility__. The next sections explain how to develop educational resources, and how to disseminate them on the SPPCloud. Keep in mind that this tutorial is intended for people developing resources, not for the users of these resources.


::: {#imp-req .callout-important collapse="false"}
## Technical requirements to deploy educational resources

- A minimum level of proficiency in `Git` {{< fa brands git-alt >}} is required to develop and make available online training resources. However, accessing to these resources on the SSPCloud does not require any familiarity with Git.
- [`Quarto`](https://quarto.org/) {{< iconify simple-icons:quarto style="color:#74aadb;" >}}
the automated report and website builder inherited from `R Markdown`.
- An understanding of the fundamental difference between making resources available for execution on a local computer or on a server like `SSPCloud`. See [`SSPCloud` documentation](https://docs.sspcloud.fr/en/). 
- Some knowledge regarding deployment of resources using `Github Actions` {{< fa brands github >}} is useful. This tutorial gives a few templates but understanding what is happening behind the stage is not in the scope of that tutorial. 

:::


# Why share educational resources on SSPCloud?

Sharing educational resources on SSPCloud offers several advantages, particularly for educators and learners working with computational tools like R or Python. Here are the key benefits:

1. **Instant access via a simple link**
SSPCloud allows users to launch pre-configured workspaces through a simple HTTPS link. Doing so, there is no need for any local installation or complex setup: learners can start working immediately, directly in their browser.

2. **Standardized and reproducible environments**
Everyone accesses the same cloud-based environment, including all necessary packages, tools, and datasets. This ensures full consistency across learners, removing issues related to differing operating systems, versions, or missing dependencies.

3. **Scalable computing power**
SSPCloud offers access to robust computational resources that can scale with your needs. From beginner tutorials in Python or R to advanced workflows involving large datasets or machine learning models, the platform can support a wide range of educational use cases.


As outlined in the SSPCloud documentation, it's important to understand that the platform separates code (Git), data (S3), and environment configuration. These components are dynamically combined when launching a compute session.

For training designers, this architecture ensures high reproducibility and fine-grained control over the environment. For users, it eliminates the need to install software, manage system permissions, or configure their local machine—making it easy to jump straight into the tutorial.


![An illustration of the SSPCloud functioning](/pics/starting_pack_objective.png)

# Which materials should be used for trainings?

When designing effective training materials, it's essential to choose formats that actively engage learners and support comprehension. While PDFs, slide decks, and videos are all valuable for delivering content, this guide focuses on interactive environments, which are particularly well-suited for hands-on learning. These environments enable learners to apply concepts immediately, test code in real time, and actively engage with the material—leading to deeper understanding and better long-term retention.

In the sections that follow, we'll begin by comparing various interactive environments based on the programming language they support. Then, we'll walk through how to build and structure them using Quarto.


## Which interactive environment should you use ? 

:::: {.panel-tabset}
## `Python` {{< fa brands python >}}

`Jupyter` notebooks[^jupyter] offer an interactive interface that allows you to write `Python` code, test it, and see the result below the instruction rather than in a separate console. `Jupyter` notebooks are essential in the fields of data science and education and research because they greatly simplify exploration and experimentation.

They allow you to combine text in `Markdown` format (a lighter markup text format than `HTML` or $\LaTeX$), `Python` code, and `HTML` code for visualizations and animations in a single document.

[^jupyter]: `Jupyter` originated from the `IPython` project, an interactive environment for `Python` developed by Fernando Pérez in 2001. In 2014, the project evolved to support other programming languages in addition to Python, leading to the creation of the Jupyter project. The name "Jupyter" is an acronym referring to the three main languages it supports: `Julia`, `Python`, and `R`. `Jupyter` notebooks are crucial in the fields of data science and education and research because they greatly simplify exploration and experimentation.

Initially, `Jupyter` {{< iconify vscode-icons:file-type-jupyter >}} was the only software offering these interactive features. Now, there are other ways to benefit from notebook advantages while having an IDE with more comprehensive features than `Jupyter`. For this reason, as of 2025, we recommend developing resources with `VSCode` {{< iconify vscode-icons:file-type-vscode >}}, a general-purpose code editor but offering excellent features in `Python`, rather than with `Jupyter`. For more information on using notebooks in VSCode, refer to the [official documentation](https://code.visualstudio.com/docs/datascience/jupyter-notebooks).

::: {.callout-note}
Although we recommend developing resources with Vscode rather than with Jupyter, final users will be able to open your educational resources with Jupyter if they want to.
:::


![Example with `Jupyter` {{< iconify vscode-icons:file-type-jupyter >}}](/pics/jupyter.png)

![Example with `VSCode` {{< iconify vscode-icons:file-type-vscode >}}](/pics/vscode.png)


## {{< fa brands r-project >}}

In {{< fa brands r-project >}}, notebooks are not commonly used - even though they offer several features that are particularly valuable for educational purposes.

When designing {{< fa brands r-project >}}-based training materials, two main options are available, each with its own pros and cons:

1. **Providing access to an HTML website**
      + Advantages: Solutions to exercices can be hidden, interactive widgets can be used to offer hints or guide learners step by step, and the layout is optimized for reading.
      + Drawbacks: This is not an interactive environment—learners must open a separate RStudio session to try out the code, which can disrupt the flow of learning.

2. **Providing access to a Quarto Markdown (.qmd) file**
      + Advantages: Fully interactive—learners can run code directly within the environment, benefiting from live feedback and hands-on practice.
      + Drawbacks: All answers and code are visible by default, which may reduce engagement and exploratory effort from the learners.

Since the first option can become cumbersome - especially when learners need to copy and paste large blocks of code - it is generally recommended to use the second option in most cases. Providing direct access to a Quarto Markdown file helps minimize the risk of hard-to-reproduce errors that often arise when learners switch between an HTML tutorial and their R session.

![Exemple with RStudio](/pics/rstudio.png)

::: {.callout-caution}
## Why `learnr` Is Not Recommended

While `learnr` allows for the creation of interactive and advanced elements such as quizzes—making it well-suited for beginner tutorials—it has some important limitations.

First, it requires deployment on a Shiny server, which can be costly and complex to maintain. Additionally, in `learnr`, code cells do not share a global environment. This means variables and objects created in one chunk are not accessible in others, making it difficult to manage state or build on previous steps.

These restrictions limit the usefulness of `learnr` for more complex tutorials, where maintaining continuity and evolving context across the tutorial is essential.

:::

:::: 


## Introducing `Quarto`  {{< iconify simple-icons:quarto style="color:#74aadb;" >}} to create training resources

`Quarto` is an open source program for creating `Python` {{< fa brands python >}} and {{< fa brands r-project >}} reproducible tutorials. 
It makes it possible to mix seamlessly code and text in the same document and can handle many output formats, including html, pdf or notebook (.ipynb extension). `Quarto` is strongly recommended for the development of educational resources.

![](pics/quarto.png)

This tutorial assumes that educational resources and training material will be made available in two forms:

- `Quarto` websites, mixing text and code chunks;
- Interactive environment (see ☝️)


# A step-by-step tutorial

## Step 1: create a `Github` {{< fa brands github >}} repository from a template

### What are templates and why use them?

The very first step towards developing educational resources consists in creating a `Github` repository that will contain them all. We recommend that you use the templates developed specifically for the AIML4OS project. There are two different templates, depending on the language you want to use:

* {{< fa brands r-project >}}: [template](https://github.com/InseeFrLab/AIML4OS-template-quarto-r)
* {{< fa brands python >}} `Python`: [template](https://github.com/InseeFrLab/AIML4OS-template-quarto-python).

These templates contain all what you need to produce resources that can be easily made available as websites or as interactive environments on the SSP Cloud. More precisely, these templates contain:

- a minimal Quarto website with graphical elements reflecting AIML4OS aesthetic;
- a minimal example of a Quarto document producing a Jupyter Notebook ({{< fa brands python >}} `Python` only);
- a minimal example of a Quarto document mixing Markdown text and `R` code ({{< fa brands r-project >}} only);
- what is needed to manage dependencies (what packages are needed to run the codes, and in which version);
- scripts for Github Actions workflow for automated deployment (don't be afraid, see below!).

::: {.callout-note collapse="false"}
## If you are not AIML4OS member and follow this guide anyway

You can still use the templates - just remove the style components using AIML4OS aesthetic. 

:::

### How to use a template?

Here is what to do to re-use a template:

- Go to the `Github` {{< fa brands github >}} page of the chosen template;
- Click on the _"Use this template"_ button and then on _"Create a new repository"_ (see screenshot);

![](https://docs.github.com/assets/cb-76823/mw-1440/images/help/repository/use-this-template-button.webp){width=50% fig-align="center"}


- Choose carefully the owner and the name of the new repository:
  - Owner: by default the owner is the creator of the fork, but it may be preferable to choose a Github organization (for instance the `AIML4OS` organization);
  - Name: give the repository a meaningful name, for instance _"Intro_To_Deep_Learning"_ or _"Intro_To_Linear_Regression"_.

## Step 2: define your development configuration on the SSPCloud

<!-- get started with `Quarto`  {{< iconify simple-icons:quarto style="color:#74aadb;" >}} -->

SSPCloud is not only useful to disseminate educational resources; it is also the right place to develop them. Doing so will facilitate resource dissemination as the environment used for training will be equivalent to the one used for development. In other words, we strongly recommend that you develop on the SSPCloud because this will help a lot to make your educational resources reproducible.

### What is a configuration and why is it useful?

The best way to develop resources on the SSP Cloud is to define your own development configuration. In technical terms, a configuration is just a service available on the SSP Cloud (eg: RStudio or VSCode) with additional user-defined settings such as: the Github repository you want to work on, your Github credentials, the size of memory and number of CPU you want to use, the initialization script you want to run... Defining a configuration has two advantage:

- it lets you define the technical environment you want to use for a specific project;
- you can resume working on your project at any time in only one click, and be sure that the technical environment remains exactly the same.

Your configurations are listed on the right side of the "My services" tab. To use a configuration, you just have to click on Launch (red rectangle). You can modify or delete an existing configuration by clicking on the contextual menu (green rectangle).

![](pics/SSPCloud4.png){width=600}


::: {.callout-warning collapse="false"}
Defining a configuration may seem complicated the first time you do it, but you will get used to it in no time.
:::

### How to define a configuration

Here is how to define a development configuration the SSP-Cloud.

::: {.panel-tabset}

## {{< fa brands r-project >}}

- Go the "My Services" Tab and click on "New Service";
- Choose Rstudio and click Launch;
- Customize the configuration by changing four settings:
  + In the "Friendly Name" field, choose a meaningful name (for instance `dev_Intro_To_Linear_Regression`);   
  + In the "Repository" field of the "Git" tab, paste the URL of the repository you created in step 1 (for instance: `https://www.github.com/AIML4OS/Intro_To_Linear_Regression`);
  + In the "Network Access" tab, enable access to your service through port 5000;
  + (optional) In the "Initialization scripts" tab, paste the URL of your init script (for instance: `https://www.github.com/AIML4OS/Intro_To_Linear_Regression/init.sh`);
- Click on Save configuration;
- Click on Launch;
- Open the Rstudio service;
- Rename the Rproj file with a meaningful name (for instance `Intro_To_Linear_Regression.Rproj`);
- Click on the Rproj file to open the RStudio project;
- Run `renv::restore()` (this may take a while);
- You're all set!

## `Python` {{< fa brands python >}}

- Go the "My Services" Tab and click on "New Service";
- Choose `Vscode-r-python-julia` and click Launch;
- Customize the configuration by changing four settings:
  + In the "Friendly Name" field, choose a meaningful name (for instance `dev_Intro_To_Linear_Regression`);   
  + In the "Repository" field of the "Git" tab, paste the URL of the repository you created in step 1 (for instance: `https://www.github.com/AIML4OS/Intro_To_Linear_Regression`);
  + In the "Network Access" tab, enable access to your service through port 5000;
  + In the "Initialization scripts" tab, paste this URL `https://raw.githubusercontent.com/InseeFrLab/AIML4OS-template-quarto-python/refs/heads/main/init.sh`;
- Click on Save configuration;
- Click on Launch;
- Open the Vscode service;
- You're all set!

:::

### How to use an existing configuration

Once a configuration is defined, using it is very easy and very fast:

::: {.panel-tabset}

## {{< fa brands r-project >}}

- Go the "My Services" Tab;
- On the right side of the screen, find the configuration of your project and click on Launch;
- Open the Rstudio service;
- Click on the Rproj file to open the RStudio project;
- Run `renv::restore()` (this may take a while);
- You're all set!

## `Python` {{< fa brands python >}}

- Go the "My Services" Tab;
- On the right side of the screen, find the configuration of your project and click on Launch;
- Open the VSCode service;
- You're all set!

:::

## Step 3: develop resources

If you have created a repository from a template and defined a development configuration, developing resources basically means modifying and extending the minimal examples available in your repository.

::: {.callout-important collapse="false"}
## Git, git, git, git, git

__It is absolutely essential that you commit and push your changes on a regular basis__ (every 30 minutes or so), because your service (Rstudio or VScode) is not persistent, meaning that any changes that were pushed before closing the service are permanently lost.
:::

### Download data (if needed)

Your scripts may require some data to run (for instance: training data for an algorithm). Here is a way to download data automatically:

- Upload your data files on the S3 storage of the SSP Cloud, and make sure that the files are public;
- Adapt the `download_data.sh` file so that the data is downloaded to your folder of choice;
- Add this script as an initialization script in your configuration (see step 2).


### Developing and previewing a website

You can develop you website by writing text and code chunks in the existing `qmd` files (`index.qmd` and `chapter1.qmd`). You can also extend the structure of the website by adding new Quarto documents (in the `chapters` subdirectory). These new documents must then be added to the website by modifying the `_quarto.yml` file in two places: in the `render` argument, and in the `contents` of the `sidebar` argument.

It is often convenient to have a look at what this website looks like while developing it. You can preview your website from command line by executing:

```{.bash}
quarto preview --port 5000 --host 0.0.0.0
```

Then go to [https://datalab.sspcloud.fr/my-services](https://datalab.sspcloud.fr/my-services), open the README of the service you are using and click on the link to the external port.

::: {#fig-port5000 layout-ncol=2}

![](pics/SSPCloud2.png){width=350}

![](pics/SSPCloud3.png){width=400}

Accessing website preview
:::


::: {.callout-warning collapse="false"}
## What to do if you can't access the website preview?

If you can't access the website preview because there is no link in the README, it is likely that you forgot to open port 5000 in your configuration. This is easily solved: 

- Close your RStudio/VSCode service (after committing and pushing all changes!);
- Modify your configuration: in the "Network Access" tab, enable access to your service through port 5000 and save this new configuration;
- Launch again your RStudio/VSCode service.

:::

### Developing interactive scripts

::: {.panel-tabset}

## {{< fa brands r-project >}}

A compléter sur Quarto/R

::: {.callout-warning collapse="false"}
__The function `install.packages()` must not be used anywhere in your resources__ because it is not the proper way to manage package requirements (see below for recommendations on dependency management).
:::

## `Python` {{< fa brands python >}}

A compléter sur Notebooks Python.

It makes more sense to provide your learners with a Jupyter notebook. To generate it, you can write

```{.bash}
quarto render --to ipynb
```

Notebooks will be written in the `_site` folder

:::

### Managing dependencies when developing resources

A major challenge in any data science project is to make sure that its codes can be re-run without error by someone working in a different environment (this is called __portability__). Various technical requirements must be met to ensure portability; one of them is to keep track of all packages needed to run the code (and of the exact version of each package!), so that a new user can reinstall them easily. This section explains how to manage these dependencies using the right tools.

The dependency management tool depends on the language you use:

- If you use `R`, we recommend that you use `renv`;
- If you use `Python`, we recommend that you use `uv`.


::: {.panel-tabset}

## {{< fa brands r-project >}}

`renv` is an R package that helps you manage the dependencies of each of your projects. It means that `renv` lets you keep track of what packages are needed to run your code, and in what exact version. More precisely, using `renv` adds two specific files to your project:

- The lockfile `renv.lock` records information about every package used in the project, so that these packages can be re-installed on a new machine;
- the `.Rprofile` project file. This file is run automatically every time you start `R` so that `renv` is used properly.

Here is how to use `renv`:

- The first step in using `renv` is to initiate the tracking of dependencies using `renv::init()`. __You do not need to do it if you use the `R` template__ because this was already done.
- When developing resources, you should regularly run `renv::snapshot()`. This command will analyze your `R` scripts, detects what packages are used, and updates the `renv.lock` file. Do not forget to commit and push the changes to the `renv.lock` file!
- When you start working on your project with a new service, you should run `renv::restore()`. This command will reinstall all the packages listed in the `renv.lock` file.

::: {.callout-warning collapse="false"}
If you forget to update the `renv.lock` file, your Github Actions workflow are likely to fail, and you probably won't be able to execute your `R` script in a new RStudio service. Keep calm, here is the solution: just run `renv::snapshot()`, commit and push the changes to the `renv.lock` file. This should solve the problem.
:::

For more information, see the [official documentation](https://rstudio.github.io/renv/articles/renv.html) of `renv`.

## `Python` {{< fa brands python >}}

__à compléter par Lino__

:::




## Step 4: set up a Github pages website

__This step is optional__, depending on whether your resources include a website. You can skip this step if your resources consist only in interactive environments (Jupyter notebooks for `Python`, interactive Quarto documents with `R` chunks for `R`).

### What are Github Actions and Github pages and why are they useful?

If you are developing a website for educational purposes, you probably want to publish it online. If you perform the publication manually (building the website, then publishing it), you'll have to re-do this series of tasks every time you change your website. This is time-consuming, repetitive and boring. But fortunately, you can automate this process thanks to GitHub Actions and Github Pages:

- GitHub Actions is a tool built into GitHub that runs pre-defined tasks like testing, building, and deploying code when specific events occur in a repository. For instance, GitHub Actions may perform a series of task every time you push on the `main` branch of your repository, without you doing anything manually. 
- GitHub Pages is a another tool from Github that lets you publish static websites directly from a GitHub repository; it is often used for project documentation or personal portfolios.

The main message is: __by combining GitHub Actions with GitHub Pages, you can set things up so that every time you make changes to your repository, GitHub Actions automatically updates your website and publishes it on GitHub Pages.__ This will save you a lot of time!

### Create the `gh-pages` branch

When developing resources, you will most likely use the `main` branch. However, for `Github Actions` to work, you need an additional branch `gh-pages` used by Github to deploy websites. This one will be rewritten automatically by `Github` after every Github Actions workflow. However, you need to create it first. __This should be done only once.__ Quarto documentation gives this command to create that branch. __Be careful with that command, do not use before having done a first push on Github.__

```{.bash}
git checkout --orphan gh-pages
git reset --hard # make sure all changes are committed before running this!
git commit --allow-empty -m "Initialising gh-pages branch"
git push origin gh-pages
```

### Define a Github Actions workflow

You need to define a Github Actions workflow to automate output construction and deployment. A GHA workflow is a list of instructions (for instance: install `R`, install packages...) that are executed automatically every time a certain event happens (for instance every time you push on the main branch). A GHA workflow is defined using specific `yaml` scripts, located in the `.github/workflows` directory of your repository. The templates already contain standard workflows that you can use as a starting point. We recommend that you have a careful look at these workflows; comments were added so that they are easy to follow.

A few important remarks on automated deployment:

- The website is deployed at an URL that depends on the owner and the name of the repository: `https://{REPO_OWNER}.github.io/{REPO_NAME}/`.
- You can monitor Github Actions jobs in the "Actions" tab of the Github repository of your project. Do not be afraid if your jobs fail at first; getting Github Actions to work often requires some debugging.


## Step 5: make your interactive environments easily available on the SSP Cloud

__This step is optional__, depending on whether your resources include interactive environments (Jupyter notebooks for `Python`, interactive Quarto documents with `R` chunks for `R`). You can skip this step if your resources consist only in a Quarto website.


A compléter avec Inès

<!-- ## Make a ready to use link to your resources

Let's assume now you want learners to avoid copy-pasting code from your program to their sandbox environment. SSPCloud proposes a feature that enables to launch a ready to use sandbox with one click. This enables to start an environment that can be overloaded by some parameters that would make learners ready to start their learning experience. 

::: {.panel-tabset}
## R



## Python

:::

# List your resources on the training portal

TO DO -->