---
title: "Creating and disseminating educational resources for SSPCloud users"
subtitle: "Startup guide"
author: "Lino Galiana and Olivier Meslin"
---


This tutorial aims to be a practical guide for people developing educational resources in `R` or `Python` and wishing to disseminate them easily through the SSPCloud.

There are a few technical requirements:

- A minimum level of proficiency in Git is required to develop and make available online training resources. However, accessing to these resources on the SSPCloud does not require any familiarity with Git.
- [`Quarto`](https://quarto.org/) the automated report and website builder inherited from `R Markdown`.
- [`SSPCloud` documentation](https://docs.sspcloud.fr/en/), in particular the fundamental difference between making resources available for execution on a local computer or on a server like the SSPCloud. 
- Some knowledge regarding deployment of resources using `Github Actions` is useful. This tutorial gives a few templates but understanding them is not in the scope of that tutorial. 

The aim of this tutorial is to get you started quickly on building educational resources with a state-of-the-art level of reproducibility. The next sections explain how to develop educational resources, and how to disseminate them on the SPPCloud. Keep in mind that this tutorial is intended for people developing resources, not for the users of these resources.

# Why share educational resources on SSPCloud?

Sharing educational resources on SSPCloud offers several advantages, particularly for educators and learners working with computational tools like R or Python. Here are the key benefits:

1. **Access to Computational Resources**  
   By hosting educational resources on SSPCloud, users can leverage powerful computational resources provided by the platform. This is especially valuable for running intensive data analyses, simulations, or machine learning models without requiring high-performance local machines.

2. **Access to a Standardized Environment**  
   SSPCloud provides a pre-configured and standardized environment with the necessary packages, libraries, and system dependencies. This minimizes the common issues of version mismatches and missing dependencies, ensuring that all users have a consistent setup to work from, regardless of their local configuration.

3. **Simple Launch via an HTTPS Link**  
   Resources on SSPCloud can be accessed and launched with a simple HTTPS link. This eliminates the complexity of manual setup or configuration, enabling users to start working with the resources almost instantly, directly in their browser.


As explained in the [`SSPCloud` documentation](https://docs.sspcloud.fr/en/), it's important to understand that with this platform, code (`Git`), data (`S3`) and configuration are stored separately, while the compute space brings these three elements together. For training designers, this makes resources highly reproducible, with full control over the environment. For the users of these resources, it means that they no longer have to install software, play with their machine's rights, etc., before they can get started on the tutorial.

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/environment_clean.png)

# Introducing Quarto

`Quarto` is an open source program for creating Python and `R` tutorials. It makes it possible to mix seamlessly code and text in the same document and can handle many output formats, including html, pdf or notebook (.ipynb extension). `Quarto` is strongly recommended for the development of educational resources.

![](pics/quarto.png)

This tutorial assumes that educational resources and training material will be made available in two forms:

- Quarto websites, mixing text and code chunks;
- Interactive scripts:
      - In Python, training material takes the form of a notebook. This is the standard delivery method for Python code.
      - In R, training material takes the form of an RStudio project (because notebooks are not frequently used in R). 

# Developing educational resources

## Step 1: create a Github repository from a template

The very first step towards developing educational resources consists in creating a Github repository that will contain them all. We recommend that you use templates developed specifically for the AIML4OS project. Depending on the language you want to use, there is a [template for `R`](https://github.com/InseeFrLab/AIML4OS-template-quarto-r) and a [template for Python](https://github.com/InseeFrLab/AIML4OS-template-quarto-python).

Here is a simple procedure to re-use a template:

- Go to the Github page of the chosen template (`R` or Python);
- Click on the ![https://upload.wikimedia.org/wikipedia/commons/3/38/GitHub_Fork_Button.png] button;
- Choose __carefully__ the owner and the name of the new repository:
      - Owner: by default the owner is the creator of the fork, but it may be preferable to choose a Github organization (for instance the `AIML4OS` organization);
      - Name: give the repository a meaningful name, for instance "Intro_To_Deep_Learning" or "Intro_To_Linear_Regression".
- Dissociate the fork from the original template. To do so, go to the Github page of the new repository, click on Settings, scroll down to the Danger Zone and click on "Leave fork network".

## Step 2: get started with `Quarto` on the SSPCloud

SSPCloud is not only useful to disseminate educational resources; it is also the right place to develop them. This will facilitate resource dissemination as the environment used for training will be equivalent to the one used for development. In otyher words, we strongly recommend that you develop on the SSPCloud because this will help a lot to make your educational resources reproducible.

Here is a simple procedure to start developing resources on the SSP-Cloud. The procedure is different and slightly longer if this is the first time you develop resources on this particular project (because you need to define a configuration).

::: {.panel-tabset}

## R

:::: {.panel-tabset}

### First time

- Go the "My Services" Tab and click on "New Service";
- Choose Rstudio and click Launch;
- Customize the configuration by changing three settings:
   - In the "Friendly Name" field, choose a meaningful name for the configuration (for instance `dev_Intro_To_Linear_Regression`);   
   - In the "Repository" field of the "Git" tab, paste the URL of the repository you created in step 1 (for instance: `https://www.github.com/AIML4OS/Intro_To_Linear_Regression`);
   - In the "Network Access" tab, enable access to your service through port 5000.
- Click on Save configuration;
- Click on Launch;
- Open the Rstudio service;
- Develop your resources. Do not forget to commit and push regularly!

### Not the first time

- Go the "My Services" Tab;
- On the right side of the screen, find the configuration of your project and click on Launch;
- Develop your resources. Do not forget to commit and push regularly!

::::

## Python

:::: {.panel-tabset}

### First time

- Go the "My Services" Tab and click on "New Service";
- Choose Vscode-r-python-julia and click Launch. We recommend using Vscode because developing Quarto resources is easier with VSCode than with Jupyter. However, final users will be able to open your educational resources with Jupyter;
- Customize the configuration by changing three settings:
   - In the "Friendly Name" field, choose a meaningful name (for instance `dev_Intro_To_Linear_Regression`);   
   - In the "Repository" field of the "Git" tab, paste the URL of the repository you created in step 1 (for instance: `https://www.github.com/AIML4OS/Intro_To_Linear_Regression`);
   - In the "Network Access" tab, enable access to your service through port 5000.
- Click on Save configuration;
- Click on Launch;
- Open the Rstudio service;
- Develop your resources. Do not forget to commit and push regularly!

### Not the first time

- Go the "My Services" Tab;
- On the right side of the screen, find the configuration of your project and click on Launch;
- Develop your resources. Do not forget to commit and push regularly!

::::

::: {.panel-tabset}

## Step 3: set up a Github pages website

__This step is optional__, depending on whether your resources include a website. If your resources consist only in Jupyter notebooks, R scripts or Quarto documents with R chunks, you can skip this step.

### Create the `gh-pages` branch

When developing resources, you will most likely use the `main` branch. However, for `Github Actions` to work, you need an additional branch `gh-pages` used by Github to deploy websites. This one will be rewritten automatically by `Github` after every Github Actions pipeline. However, you need to create it first. __This should be done only once.__ Quarto documentation gives this command to create that branch. __Be careful with that command, do not use before having done a first push on Github.__

```{.bash}
git checkout --orphan gh-pages
git reset --hard # make sure all changes are committed before running this!
git commit --allow-empty -m "Initialising gh-pages branch"
git push origin gh-pages
```

### Define a Github Actions workflow

We need to define a GHA workflow to automate output construction and deployment. This is done using specific yaml scripts, located in the `.github/workflows` directory of your repository.

::: {.panel-tabset}
## R

Replace content of `.github/workflows/prod.yml` by content stored inside `resources/workflows/r.yaml`

## Python

Replace content of `.github/workflows/prod.yml` by content stored inside `resources/workflows/python.yaml`

:::

Commit and push that new file. Look at the new pipeline that starts after every push on `main` branch. Once succeeded, you should have a publicly available website that has been deployed on a Github pages website. 



## Step 4: develop resources

- Committer souvent
- Ajuster la structure
- Gérer les dépendances
- Visualiser le site.

Now assuming you want to give access to your resources as an html website, from command line you can preview your website using

```{.bash}
quarto preview --port 5000 --host 0.0.0.0
```

Then go to https://datalab.sspcloud.fr/my-services, open the README of the service you use and click on the section regarding external port opened [capture à faire].

## R

You can jump to next session

## Python

It makes more sense to provide your trainees with a jupyter notebook. To generate it, you can write

```{.bash}
quarto render --to ipynb
```

Notebooks will be written in the `_site` folder

:::


We'll now assume that you're satisfied with the resources you've built and want to make them available to your trainees.

# Make your resources available on an online website


## Make a ready to use link to your resources

Let's assume now you want trainees to avoid copy-pasting code from your program to their sandbox environment. SSPCloud proposes a feature that enables to launch a ready to use sandbox with one click. This enables to start an environment that can be overloaded by some parameters that would make trainees ready to start their learning experience. 

::: {.panel-tabset}
## R



## Python

:::

# List your resources on the training portal

TO DO