[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "",
    "text": "This tutorial aims to be a practical guide for people developing educational resources in R or Python and wishing to disseminate them easily through the SSPCloud.\nThere are a few technical requirements:\nThe aim of this tutorial is to get you started quickly on building educational resources with a state-of-the-art level of reproducibility. The next sections explain how to develop educational resources, and how to disseminate them on the SPPCloud. Keep in mind that this tutorial is intended for people developing resources, not for the users of these resources."
  },
  {
    "objectID": "index.html#step-1-create-a-github-repository-from-a-template",
    "href": "index.html#step-1-create-a-github-repository-from-a-template",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "Step 1: create a Github repository from a template",
    "text": "Step 1: create a Github repository from a template\nThe very first step towards developing educational resources consists in creating a Github repository that will contain them all. We recommend that you use templates developed specifically for the AIML4OS project. Depending on the language you want to use, there is a template for R and a template for Python.\nHere is a simple procedure to re-use a template:\n\nGo to the Github page of the chosen template (R or Python);\nClick on the ![https://upload.wikimedia.org/wikipedia/commons/3/38/GitHub_Fork_Button.png] button;\nChoose carefully the owner and the name of the new repository: - Owner: by default the owner is the creator of the fork, but it may be preferable to choose a Github organization (for instance the AIML4OS organization); - Name: give the repository a meaningful name, for instance “Intro_To_Deep_Learning” or “Intro_To_Linear_Regression”.\nDissociate the fork from the original template. To do so, go to the Github page of the new repository, click on Settings, scroll down to the Danger Zone and click on “Leave fork network”."
  },
  {
    "objectID": "index.html#step-2-develop-resources-with-quarto-on-the-sspcloud",
    "href": "index.html#step-2-develop-resources-with-quarto-on-the-sspcloud",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "Step 2: develop resources with Quarto on the SSPCloud",
    "text": "Step 2: develop resources with Quarto on the SSPCloud\nSSPCloud is not only useful to disseminate educational resources; it is also the right place to develop them. This will facilitate resource dissemination as the environment used for training will be equivalent to the one used for development. In otyher words, we strongly recommend that you develop on the SSPCloud because this will help a lot to make your educational resources reproducible.\nHere is a simple procedure to start developing resources on the SSP-Cloud. The procedure is different and slightly longer if this is the first time you develop resources on this particular project (because you need to define a configuration).\n\nRPythonMake a ready to use link to your resources\n\n\n\nFirst timeNot the first time\n\n\n\nGo the “My Services” Tab and click on “New Service”;\nChoose Rstudio and click Launch;\nCustomize the configuration by changing three settings:\n\nIn the “Friendly Name” field, choose a meaningful name (for instance “Intro_To_Linear_Regression”);\n\nIn the “Repository” field of the “Git” tab, paste the URL of the repository you created in step 1 (for instance: https://www.github.com/AIML4OS/Intro_To_Linear_Regression);\nIn the “Network Access” tab, enable access to your service through port 5000.\n\nClick on Save configuration;\nClick on Launch;\nOpen the Rstudio service;\nDevelop your resources. Do not forget to commit and push regularly!\n\n\n\n\nGo the “My Services” Tab;\nOn the right side of the screen, find the configuration of your project and click on Launch;\nDevelop your resources. Do not forget to commit and push regularly!\n\n\n\n\n\nGo the “My Services” Tab;\nOn the first time you develop resources on this particular project:\n\nClick on “New Service”;\nChoose Rstudio and click Launch;\nCustomize the configuration by changing three settings:\n\nIn the “Friendly Name” field, choose a meaningful name (for instance “dev_Intro_To_Linear_Regression”);\n\nIn the “Repository” field of the “Git” tab, paste the URL of the repository you created in step 1 (for instance: https://www.github.com/AIML4OS/Intro_To_Linear_Regression);\nIn the “Network Access” tab, enable access to your service through port 5000.\n\nClick on Save configuration;\n\nClick on Launch;\nOpen the Rstudio service;\nDevelop your resources. Do not forget to commit and push regularly!\n\n\n\n\nGo the “My Services” Tab and click on “New Service”;\nChoose Vscode-r-python-julia and click Launch. We recommend using Vscode because developing Quarto resources is easier with VSCode than with Jupyter. However, final users will be able to open your educational resources with Jupyter;\nCustomize the configuration by changing three settings:\n\nIn the “Friendly Name” field, choose a meaningful name (for instance “Intro_To_Linear_Regression”);\n\nIn the “Repository” field of the “Git” tab, paste the URL of the repository you created in step 1 (for instance: https://www.github.com/AIML4OS/Intro_To_Linear_Regression);\nIn the “Network Access” tab, enable access to your service through port 5000.\n\nOpen the Vscode service;\nDevelop your resources. Do not forget to commit and push regularly!\n\n\nStep 3: develop resources with Quarto on the SSPCloudRPython\n\n\nNow assuming you want to give access to your resources as an html website, from command line you can preview your website using\nquarto preview --port 5000 --host 0.0.0.0\nThen go to https://datalab.sspcloud.fr/my-services, open the README of the service you use and click on the section regarding external port opened [capture à faire].\n\n\nYou can jump to next session\n\n\nIt makes more sense to provide your trainees with a jupyter notebook. To generate it, you can write\nquarto render --to ipynb\nNotebooks will be written in the _site folder\n\n\n\nWe’ll now assume that you’re satisfied with the resources you’ve built and want to make them available to your trainees.\n\nMake your resources available on an online website\n\n\n\n\n\n\nGithub actions needs a gh-pages branch to deploy websites\n\n\n\nWhen developing resources, you use main branch. However, for Github Actions to work, you need an additional branch gh-pages. This one will be rewritten automatically by Github after every Github Actions pipeline. However, you need to create it first.\nQuarto documentation gives this command to create that branch:\ngit checkout --orphan gh-pages\ngit reset --hard # make sure all changes are committed before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\nBe careful with that command, do not use before having done a first push on Github.\n\n\nTo generalize the previous approach, we need to automate output construction through Github Actions.\n\nRPython\n\n\nReplace content of .github/workflows/prod.yml by content stored inside resources/workflows/r.yaml\n\n\nReplace content of .github/workflows/prod.yml by content stored inside resources/workflows/python.yaml\n\n\n\nCommit and push that new file. Look at the new pipeline that starts after every push on main branch. Once succeeded, you should have a publicly available website that has been deployed on a Github pages website.\n\n\n\nLet’s assume now you want trainees to avoid copy-pasting code from your program to their sandbox environment. SSPCloud proposes a feature that enables to launch a ready to use sandbox with one click. This enables to start an environment that can be overloaded by some parameters that would make trainees ready to start their learning experience.\n\nRPython\n\n\n\n\n\n\n\n\n\n\nList your resources on the training portal\nTO DO"
  }
]