[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "",
    "text": "This tutorial aims to be a practical guide for people developing educational resources in  or Python  and wishing to disseminate them easily through the SSPCloud.\nTo make this possible, a few technical prerequisites are needed - these are outlined in Important 1.\nThe aim of this tutorial is to get you started quickly on building educational resources with a state-of-the-art level of reproducibility. The next sections explain how to develop educational resources, and how to disseminate them on the SPPCloud. Keep in mind that this tutorial is intended for people developing resources, not for the users of these resources."
  },
  {
    "objectID": "index.html#which-interactive-environment-should-you-use",
    "href": "index.html#which-interactive-environment-should-you-use",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "2.1 Which interactive environment should you use ?",
    "text": "2.1 Which interactive environment should you use ?\n\nPython \n\n\nJupyter notebooks1 offer an interactive interface that allows you to write Python code, test it, and see the result below the instruction rather than in a separate console. Jupyter notebooks are essential in the fields of data science and education and research because they greatly simplify exploration and experimentation.\nThey allow you to combine text in Markdown format (a lighter markup text format than HTML or \\(\\LaTeX\\)), Python code, and HTML code for visualizations and animations in a single document.\nInitially, Jupyter  was the only software offering these interactive features. Now, there are other ways to benefit from notebook advantages while having an IDE with more comprehensive features than Jupyter. For this reason, as of 2025, we recommend developing resources with VSCode , a general-purpose code editor but offering excellent features in Python, rather than with Jupyter. For more information on using notebooks in VSCode, refer to the official documentation.\n\n\n\n\n\n\nNote\n\n\n\nAlthough we recommend developing resources with Vscode rather than with Jupyter, final users will be able to open your educational resources with Jupyter if they want to.\n\n\n\n\n\nExample with Jupyter \n\n\n\n\n\nExample with VSCode \n\n\n\n\nIn , notebooks are not commonly used - even though they offer several features that are particularly valuable for educational purposes.\nWhen designing -based training materials, two main options are available, each with its own pros and cons:\n\nProviding access to an HTML website\n\nAdvantages: Solutions to exercices can be hidden, interactive widgets can be used to offer hints or guide learners step by step, and the layout is optimized for reading.\nDrawbacks: This is not an interactive environment—learners must open a separate RStudio session to try out the code, which can disrupt the flow of learning.\n\nProviding access to a Quarto Markdown (.qmd) file\n\nAdvantages: Fully interactive—learners can run code directly within the environment, benefiting from live feedback and hands-on practice.\nDrawbacks: All answers and code are visible by default, which may reduce engagement and exploratory effort from the learners.\n\n\nSince the first option can become cumbersome - especially when learners need to copy and paste large blocks of code - it is generally recommended to use the second option in most cases. Providing direct access to a Quarto Markdown file helps minimize the risk of hard-to-reproduce errors that often arise when learners switch between an HTML tutorial and their R session.\n\n\n\nExemple with RStudio\n\n\n\n\n\n\n\n\nWhy learnr Is Not Recommended\n\n\n\nWhile learnr allows for the creation of interactive and advanced elements such as quizzes—making it well-suited for beginner tutorials—it has some important limitations.\nFirst, it requires deployment on a Shiny server, which can be costly and complex to maintain. Additionally, in learnr, code cells do not share a global environment. This means variables and objects created in one chunk are not accessible in others, making it difficult to manage state or build on previous steps.\nThese restrictions limit the usefulness of learnr for more complex tutorials, where maintaining continuity and evolving context across the tutorial is essential."
  },
  {
    "objectID": "index.html#introducing-quarto-to-create-training-resources",
    "href": "index.html#introducing-quarto-to-create-training-resources",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "2.2 Introducing Quarto  to create training resources",
    "text": "2.2 Introducing Quarto  to create training resources\nQuarto is an open source program for creating Python  and  reproducible tutorials. It makes it possible to mix seamlessly code and text in the same document and can handle many output formats, including html, pdf or notebook (.ipynb extension). Quarto is strongly recommended for the development of educational resources.\n\nThis tutorial assumes that educational resources and training material will be made available in two forms:\n\nQuarto websites, mixing text and code chunks;\nInteractive environment (see ☝️)"
  },
  {
    "objectID": "index.html#step-1-create-a-github-repository-from-a-template",
    "href": "index.html#step-1-create-a-github-repository-from-a-template",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "3.1 Step 1: create a Github  repository from a template",
    "text": "3.1 Step 1: create a Github  repository from a template\n\n3.1.1 What are templates and why use them?\nThe very first step towards developing educational resources consists in creating a Github repository that will contain them all. We recommend that you use the templates developed specifically for the AIML4OS project. There are two different templates, depending on the language you want to use:\n\n: template\n Python: template.\n\nThese templates contain all what you need to produce resources that can be easily made available as websites or as interactive environments on the SSP Cloud. More precisely, these templates contain:\n\na minimal Quarto website with graphical elements reflecting AIML4OS aesthetic;\na minimal example of a Quarto document producing a Jupyter Notebook ( Python only);\na minimal example of a Quarto document mixing Markdown text and R code ( only);\nwhat is needed to manage dependencies (what packages are needed to run the codes, and in which version);\nscripts for Github Actions workflow for automated deployment (don’t be afraid, see below!).\n\n\n\n\n\n\n\nIf you are not AIML4OS member and follow this guide anyway\n\n\n\n\n\nYou can still use the templates - just remove the style components using AIML4OS aesthetic.\n\n\n\n\n\n3.1.2 How to use a template?\nHere is what to do to re-use a template:\n\nGo to the Github  page of the chosen template;\nClick on the “Use this template” button and then on “Create a new repository” (see screenshot);\n\n\n\n\n\n\n\nChoose carefully the owner and the name of the new repository:\n\nOwner: by default the owner is the creator of the fork, but it may be preferable to choose a Github organization (for instance the AIML4OS organization);\nName: give the repository a meaningful name, for instance “Intro_To_Deep_Learning” or “Intro_To_Linear_Regression”."
  },
  {
    "objectID": "index.html#step-2-define-your-development-configuration-on-the-sspcloud",
    "href": "index.html#step-2-define-your-development-configuration-on-the-sspcloud",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "3.2 Step 2: define your development configuration on the SSPCloud",
    "text": "3.2 Step 2: define your development configuration on the SSPCloud\n\nSSPCloud is not only useful to disseminate educational resources; it is also the right place to develop them. Doing so will facilitate resource dissemination as the environment used for training will be equivalent to the one used for development. In other words, we strongly recommend that you develop on the SSPCloud because this will help a lot to make your educational resources reproducible.\n\n3.2.1 What is a configuration and why is it useful?\nThe best way to develop resources on the SSP Cloud is to define your own development configuration. In technical terms, a configuration is just a service available on the SSP Cloud (eg: RStudio or VSCode) with additional user-defined settings such as: the Github repository you want to work on, your Github credentials, the size of memory and number of CPU you want to use, the initialization script you want to run… Defining a configuration has two advantage:\n\nit lets you define the technical environment you want to use for a specific project;\nyou can resume working on your project at any time in only one click, and be sure that the technical environment remains exactly the same.\n\nYour configurations are listed on the right side of the “My services” tab. To use a configuration, you just have to click on Launch (red rectangle). You can modify or delete an existing configuration by clicking on the contextual menu (green rectangle).\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nDefining a configuration may seem complicated the first time you do it, but you will get used to it in no time.\n\n\n\n\n\n3.2.2 How to define a configuration\nHere is how to define a development configuration the SSP-Cloud.\n\nPython \n\n\n\nGo the “My Services” Tab and click on “New Service”;\nChoose Rstudio and click Launch;\nCustomize the configuration by changing three settings:\n\nIn the “Friendly Name” field, choose a meaningful name (for instance dev_Intro_To_Linear_Regression);\n\nIn the “Repository” field of the “Git” tab, paste the URL of the repository you created in step 1 (for instance: https://www.github.com/AIML4OS/Intro_To_Linear_Regression);\nIn the “Network Access” tab, enable access to your service through port 5000.\n\nClick on Save configuration;\nClick on Launch;\nOpen the Rstudio service;\nRename the Rproj file with a meaningful name (for instance Intro_To_Linear_Regression.Rproj);\nClick on the Rproj file to open the RStudio project;\nRun renv::restore() (this may take a while);\nYou’re all set!\n\n\n\n\nGo the “My Services” Tab and click on “New Service”;\nChoose Vscode-r-python-julia and click Launch;\nCustomize the configuration by changing three settings:\n\nIn the “Friendly Name” field, choose a meaningful name (for instance dev_Intro_To_Linear_Regression);\n\nIn the “Repository” field of the “Git” tab, paste the URL of the repository you created in step 1 (for instance: https://www.github.com/AIML4OS/Intro_To_Linear_Regression);\nIn the “Network Access” tab, enable access to your service through port 5000.\n\nClick on Save configuration;\nClick on Launch;\nOpen the Vscode service;\nYou’re all set!\n\n\n\n\n\n\n3.2.3 How to use an existing configuration\nOnce a configuration is defined, using it is very easy and very fast:\n\nPython \n\n\n\nGo the “My Services” Tab;\nOn the right side of the screen, find the configuration of your project and click on Launch;\nOpen the Rstudio service;\nClick on the Rproj file to open the RStudio project;\nRun renv::restore() (this may take a while);\nYou’re all set!\n\n\n\n\nGo the “My Services” Tab;\nOn the right side of the screen, find the configuration of your project and click on Launch;\nOpen the VSCode service;\nYou’re all set!"
  },
  {
    "objectID": "index.html#step-3-develop-resources",
    "href": "index.html#step-3-develop-resources",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "3.3 Step 3: develop resources",
    "text": "3.3 Step 3: develop resources\nIf you have created a repository from a template and defined a development configuration, developing resources basically means modifying and extending the minimal examples available in your repository.\n\n\n\n\n\n\nGit, git, git, git, git\n\n\n\n\n\nIt is absolutely essential that you commit and push your changes on a regular basis (every 30 minutes or so), because your service (Rstudio or VScode) is not persistent, meaning that any changes that were pushed before closing the service are permanently lost.\n\n\n\n\n3.3.1 Developing and previewing a website\nYou can develop you website by writing text and code chunks in the existing qmd files (index.qmd and chapter1.qmd). You can also extend the structure of the website by adding new Quarto documents (in the chapters subdirectory). These new documents must then be added to the website by modifying the _quarto.yml file in two places: in the render argument, and in the contents of the sidebar argument.\nIt is often convenient to have a look at what this website looks like while developing it. You can preview your website from command line by executing:\nquarto preview --port 5000 --host 0.0.0.0\nThen go to https://datalab.sspcloud.fr/my-services, open the README of the service you are using and click on the link to the external port.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Accessing website preview\n\n\n\n\n\n\n\n\n\nWhat to do if you can’t access the website preview?\n\n\n\n\n\nIf you can’t access the website preview because there is no link in the README, it is likely that you forgot to open port 5000 in your configuration. This is easily solved:\n\nClose your RStudio/VSCode service (after committing and pushing all changes!);\nModify your configuration: in the “Network Access” tab, enable access to your service through port 5000 and save this new configuration;\nLaunch again your RStudio/VSCode service.\n\n\n\n\n\n\n3.3.2 Developing interactive scripts\n\n3.3.2.1 R\nA compléter sur Quarto/R\n\n\n\n\n\n\nWarning\n\n\n\n\n\nThe function install.packages() must not be used anywhere in your resources because it is not the proper way to manage package requirements (see below for recommendations on dependency management).\n\n\n\n\n\n3.3.2.2 Python\nA compléter sur Notebooks Python.\nIt makes more sense to provide your learners with a Jupyter notebook. To generate it, you can write\nquarto render --to ipynb\nNotebooks will be written in the _site folder\n\n\n\n3.3.3 Managing dependencies when developing resources\nA major challenge in any data science project is to make sure that its codes can be re-run without error by someone working in a different environment (this is called portability). Various technical requirements must be met to ensure portability; one of them is to keep track of all packages needed to run the code (and of the exact version of each package!), so that a new user can reinstall them easily. This section explains how to manage these dependencies using the right tools.\nThe dependency management tool depends on the language you use:\n\nIf you use R, we recommend that you use renv;\nIf you use Python, we recommend that you use uv.\n\n\nPython Step 4: set up a Github pages websiteStep 5: make your interactive environments easily available on the SSP Cloud\n\n\nrenv is an R package that helps you manage the dependencies of each of your projects. It means that renv lets you keep track of what packages are needed to run your code, and in what exact version. More precisely, using renv adds two specific files to your project:\n\nThe lockfile renv.lock records information about every package used in the project, so that these packages can be re-installed on a new machine;\nthe .Rprofile project file. This file is run automatically every time you start R so that renv is used properly.\n\nHere is how to use renv:\n\nThe first step in using renv is to initiate the tracking of dependencies using renv::init(). You do not need to do it if you use the R template because this was already done.\nWhen developing resources, you should regularly run renv::snapshot(). This command will analyze your R scripts, detects what packages are used, and updates the renv.lock file. Do not forget to commit and push the changes to the renv.lock file!\nWhen you start working on your project with a new service, you should run renv::restore(). This command will reinstall all the packages listed in the renv.lock file.\n\nFor more information, see the official documentation of renv.\n\n\nà compléter par Lino\n\n\nThis step is optional, depending on whether your resources include a website. You can skip this step if your resources consist only in interactive environments (Jupyter notebooks for Python, interactive Quarto documents with R chunks for R).\n\n3.3.4 What are Github Actions and Github pages and why are they useful?\nIf you are developing a website for educational purposes, you probably want to publish it online. If you do the publication step manually (building the website, then publishing it), you’ll have to re-do this series of tasks every time you change your website. This is time consuming, repetitive and boring. But fortunately, you can automate this process thanks to GitHub Actions and Github Pages:\n\nGitHub Actions is a tool built into GitHub that runs pre-defined tasks like testing, building, and deploying code when specific events occur in a repository. For instance, GitHub Actions may perform a series of task every time you push on the main branch of your repository, without you doing anything manually.\nGitHub Pages is a another tool from Github that lets you publish static websites directly from a GitHub repository; it is often used for project documentation or personal portfolios.\n\nThe main message is: by combining GitHub Actions with GitHub Pages, you can set things up so that every time you make changes to your repository, GitHub Actions automatically updates your website and publishes it on GitHub Pages. This will save you a lot of time!\n\n\n3.3.5 Create the gh-pages branch\nWhen developing resources, you will most likely use the main branch. However, for Github Actions to work, you need an additional branch gh-pages used by Github to deploy websites. This one will be rewritten automatically by Github after every Github Actions workflow. However, you need to create it first. This should be done only once. Quarto documentation gives this command to create that branch. Be careful with that command, do not use before having done a first push on Github.\ngit checkout --orphan gh-pages\ngit reset --hard # make sure all changes are committed before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\n\n\n3.3.6 Define a Github Actions workflow\nYou need to define a Github Actions workflow to automate output construction and deployment. A GHA workflow is a list of instructions (for instance: install R, install packages…) that are executed automatically every time a certain event happens (for instance every time you push on the main branch). A GHA workflow is defined using specific yaml scripts, located in the .github/workflows directory of your repository. The templates already contain standard workflows that you can use as a starting point.\nA few important remarks on automated deployment:\n\nThe website is deployed at an URL that depends on the owner and the name of the repository: https://{REPO_OWNER}.github.io/{REPO_NAME}/.\nYou can monitor Github Actions jobs in the “Actions” tab of the Github repository of your project. Do not be afraid if your jobs fail at first; getting Github Actions to work often requires some debugging.\n\n\n\n\nThis step is optional, depending on whether your resources include interactive environments (Jupyter notebooks for Python, interactive Quarto documents with R chunks for R). You can skip this step if your resources consist only in a Quarto website.\nA compléter avec Inès"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Creating and disseminating educational resources for SSPCloud users",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJupyter originated from the IPython project, an interactive environment for Python developed by Fernando Pérez in 2001. In 2014, the project evolved to support other programming languages in addition to Python, leading to the creation of the Jupyter project. The name “Jupyter” is an acronym referring to the three main languages it supports: Julia, Python, and R. Jupyter notebooks are crucial in the fields of data science and education and research because they greatly simplify exploration and experimentation.↩︎"
  }
]